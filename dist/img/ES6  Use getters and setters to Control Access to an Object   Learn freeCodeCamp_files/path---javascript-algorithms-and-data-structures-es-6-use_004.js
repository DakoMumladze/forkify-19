webpackJsonp([70144118484804],{3963:function(e,r){e.exports={data:{challengeNode:{title:"Use the Spread Operator to Evaluate Arrays In-Place",description:["ES6 introduces the <dfn>spread operator</dfn>, which allows us to expand arrays and other expressions in places where multiple parameters or elements are expected.","The ES5 code below uses <code>apply()</code> to compute the maximum value in an array:","<blockquote>var arr = [6, 89, 3, 45];<br>var maximus = Math.max.apply(null, arr); // returns 89</blockquote>","We had to use <code>Math.max.apply(null, arr)</code> because <code>Math.max(arr)</code> returns <code>NaN</code>. <code>Math.max()</code> expects comma-separated arguments, but not an array.","The spread operator makes this syntax much better to read and maintain.","<blockquote>const arr = [6, 89, 3, 45];<br>const maximus = Math.max(...arr); // returns 89</blockquote>","<code>...arr</code> returns an unpacked array. In other words, it <em>spreads</em> the array.","However, the spread operator only works in-place, like in an argument to a function or in an array literal. The following code will not work:","<blockquote>const spreaded = ...arr; // will throw a syntax error</blockquote>","<hr>","Copy all contents of <code>arr1</code> into another array <code>arr2</code> using the spread operator."],challengeType:1,videoUrl:null,fields:{slug:"/javascript-algorithms-and-data-structures/es6/use-the-spread-operator-to-evaluate-arrays-in-place",blockName:"ES6",tests:[{text:"<code>arr2</code> is correct copy of <code>arr1</code>.",testString:"assert(arr2.every((v, i) => v === arr1[i]), '<code>arr2</code> is correct copy of <code>arr1</code>.');"},{text:"<code>...</code> spread operator was used to duplicate <code>arr1</code>.",testString:"getUserInput => assert(getUserInput('index').match(/\\[\\s*...arr1\\s*\\]/g),'<code>...</code> spread operator was used to duplicate <code>arr1</code>.');"},{text:"<code>arr2</code> remains unchanged when <code>arr1</code> is changed.",testString:"assert((arr1, arr2) => {arr1.push('JUN'); return arr2.length < arr1.length},'<code>arr2</code> remains unchanged when <code>arr1</code> is changed.');"}]},required:[],files:{indexhtml:null,indexjs:{key:"indexjs",ext:"js",name:"index",contents:"const arr1 = ['JAN', 'FEB', 'MAR', 'APR', 'MAY'];\nlet arr2;\n(function() {\n  \"use strict\";\n  arr2 = []; // change this line\n})();\nconsole.log(arr2);",head:"",tail:""},indexjsx:null}}},pathContext:{challengeMeta:{introPath:"",template:null,required:[],nextChallengePath:"/javascript-algorithms-and-data-structures/es6/use-destructuring-assignment-to-assign-variables-from-objects",id:"587d7b89367417b2b2512b48"},slug:"/javascript-algorithms-and-data-structures/es6/use-the-spread-operator-to-evaluate-arrays-in-place"}}}});
//# sourceMappingURL=path---javascript-algorithms-and-data-structures-es-6-use-the-spread-operator-to-evaluate-arrays-in-place-bd0e0f24a7b895837f40.js.map