webpackJsonp([0xc6a1ce683ecd],{3954:function(e,t){e.exports={data:{challengeNode:{title:"Use class Syntax to Define a Constructor Function",description:["ES6 provides a new syntax to help create objects, using the keyword <dfn>class</dfn>.","This is to be noted, that the <code>class</code> syntax is just a syntax, and not a full-fledged class based implementation of object oriented paradigm, unlike in languages like Java, or Python, or Ruby etc.","In ES5, we usually define a constructor function, and use the <code>new</code> keyword to instantiate an object.","<blockquote>var SpaceShuttle = function(targetPlanet){<br>&nbsp;&nbsp;this.targetPlanet = targetPlanet;<br>}<br>var zeus = new SpaceShuttle('Jupiter');</blockquote>","The class syntax simply replaces the constructor function creation:","<blockquote>class SpaceShuttle {<br>&nbsp;&nbsp;constructor(targetPlanet){<br>&nbsp;&nbsp;&nbsp;&nbsp;this.targetPlanet = targetPlanet;<br>&nbsp;&nbsp;}<br>}<br>const zeus = new SpaceShuttle('Jupiter');</blockquote>","Notice that the <code>class</code> keyword declares a new function, and a constructor was added, which would be invoked when <code>new</code> is called - to create a new object.","<hr>","Use <code>class</code> keyword and write a proper constructor to create the <code>Vegetable</code> class.","The <code>Vegetable</code> lets you create a vegetable object, with a property <code>name</code>, to be passed to constructor."],challengeType:1,videoUrl:null,fields:{slug:"/javascript-algorithms-and-data-structures/es6/use-class-syntax-to-define-a-constructor-function",blockName:"ES6",tests:[{text:"<code>Vegetable</code> should be a <code>class</code> with a defined <code>constructor</code> method.",testString:"assert(typeof Vegetable === 'function' && typeof Vegetable.constructor === 'function', '<code>Vegetable</code> should be a <code>class</code> with a defined <code>constructor</code> method.');"},{text:"<code>class</code> keyword was used.",testString:"getUserInput => assert(getUserInput('index').match(/class/g),'<code>class</code> keyword was used.');"},{text:"<code>Vegetable</code> can be instantiated.",testString:"assert(() => {const a = new Vegetable(\"apple\"); return typeof a === 'object';},'<code>Vegetable</code> can be instantiated.');"},{text:"<code>carrot.name</code> should return <code>carrot</code>.",testString:"assert(carrot.name=='carrot','<code>carrot.name</code> should return <code>carrot</code>.');"}]},required:[],files:{indexhtml:null,indexjs:{key:"indexjs",ext:"js",name:"index",contents:"function makeClass() {\n  \"use strict\";\n  /* Alter code below this line */\n\n  /* Alter code above this line */\n  return Vegetable;\n}\nconst Vegetable = makeClass();\nconst carrot = new Vegetable('carrot');\nconsole.log(carrot.name); // => should be 'carrot'",head:"",tail:""},indexjsx:null}}},pathContext:{challengeMeta:{introPath:"",template:null,required:[],nextChallengePath:"/javascript-algorithms-and-data-structures/es6/use-getters-and-setters-to-control-access-to-an-object",id:"587d7b8b367417b2b2512b53"},slug:"/javascript-algorithms-and-data-structures/es6/use-class-syntax-to-define-a-constructor-function"}}}});
//# sourceMappingURL=path---javascript-algorithms-and-data-structures-es-6-use-class-syntax-to-define-a-constructor-function-dee5e2d1288fa7683b08.js.map