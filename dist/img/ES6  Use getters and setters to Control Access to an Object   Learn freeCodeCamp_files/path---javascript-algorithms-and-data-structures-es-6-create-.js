webpackJsonp([0x84591a384339],{3945:function(e,t){e.exports={data:{challengeNode:{title:"Create Strings using Template Literals",description:["A new feature of ES6 is the <dfn>template literal</dfn>. This is a special type of string that makes creating complex strings easier.","Template literals allow you to create multi-line strings and to use string interpolation features to create strings.","Consider the code below:",'<blockquote>const person = {<br>&nbsp;&nbsp;name: "Zodiac Hasbro",<br>&nbsp;&nbsp;age: 56<br>};<br><br>// Template literal with multi-line and string interpolation<br>const greeting = `Hello, my name is ${person.name}!<br>I am ${person.age} years old.`;<br><br>console.log(greeting); // prints<br>// Hello, my name is Zodiac Hasbro!<br>// I am 56 years old.<br></blockquote>',"A lot of things happened there.","Firstly, the example uses backticks (<code>`</code>), not quotes (<code>'</code> or <code>\"</code>), to wrap the string.","Secondly, notice that the string is multi-line, both in the code and the output. This saves inserting <code>\\n</code> within strings.","The <code>${variable}</code> syntax used above is a placeholder. Basically, you won't have to use concatenation with the <code>+</code> operator anymore. To add variables to strings, you just drop the variable in a template string and wrap it with <code>${</code> and <code>}</code>. Similarly, you can include other expressions in your string literal, for example <code>${a + b}</code>.","This new way of creating strings gives you more flexibility to create robust strings.","<hr>","Use template literal syntax with backticks to display each entry of the <code>result</code> object's <code>failure</code> array. Each entry should be wrapped inside an <code>li</code> element with the class attribute <code>text-warning</code>, and listed within the <code>resultDisplayArray</code>."],challengeType:1,videoUrl:null,fields:{slug:"/javascript-algorithms-and-data-structures/es6/create-strings-using-template-literals",blockName:"ES6",tests:[{text:"<code>resultDisplayArray</code> is an array containing <code>result failure</code> messages.",testString:"assert(typeof makeList(result.failure) === 'object' && resultDisplayArray.length === 3, '<code>resultDisplayArray</code> is a list containing <code>result failure</code> messages.');"},{text:"<code>resultDisplayArray</code> is the desired output.",testString:"assert(makeList(result.failure).every((v, i) => v === `<li class=\"text-warning\">${result.failure[i]}</li>` || v === `<li class='text-warning'>${result.failure[i]}</li>`), '<code>resultDisplayArray</code> is the desired output.');"},{text:"Template strings were used",testString:"getUserInput => assert(getUserInput('index').match(/`.*`/g), 'Template strings were not used');"}]},required:[],files:{indexhtml:null,indexjs:{key:"indexjs",ext:"js",name:"index",contents:'const result = {\n  success: ["max-length", "no-amd", "prefer-arrow-functions"],\n  failure: ["no-var", "var-on-top", "linebreak"],\n  skipped: ["id-blacklist", "no-dup-keys"]\n};\nfunction makeList(arr) {\n  "use strict";\n\n  // change code below this line\n  const resultDisplayArray = null;\n  // change code above this line\n\n  return resultDisplayArray;\n}\n/**\n * makeList(result.failure) should return:\n * [ `<li class="text-warning">no-var</li>`,\n *   `<li class="text-warning">var-on-top</li>`, \n *   `<li class="text-warning">linebreak</li>` ]\n **/\nconst resultDisplayArray = makeList(result.failure);',head:"",tail:""},indexjsx:null}}},pathContext:{challengeMeta:{introPath:"",template:null,required:[],nextChallengePath:"/javascript-algorithms-and-data-structures/es6/write-concise-object-literal-declarations-using-simple-fields",id:"587d7b8a367417b2b2512b4e"},slug:"/javascript-algorithms-and-data-structures/es6/create-strings-using-template-literals"}}}});
//# sourceMappingURL=path---javascript-algorithms-and-data-structures-es-6-create-strings-using-template-literals-6b063d7d93f080d7a853.js.map